#!/usr/bin/env zsh

tui::redraw() {
	local -i i=$y
	local fmt

	printf '\e[2J\e[H'
	for (( ; i <= y + maxl; i++ )) {
		(( i == y )) && fmt='\e[7m%s\e[m\n' || fmt='%s\n'
		printf $fmt ${list[$i]##*/}
	}
}

tui::statusbar() {
	printf '\e7\e[%dH\e[7m%s%s\e[m\e8' \
		$(( LINES - 1 )) $1 ${(l:COLUMNS - $#1:)2}
}

tui::cmdline() {
	local cmdtext=$1

	printf '\e7\e[%dH' $LINES

	if (( $#1 == 1 )) {
		printf '\e[?25h%c' $1
		stty echo
		read -r cmdtext
		stty -echo

		case $1 {
			/) tui::redraw ${(M)list:#$~cmdtext} ;;

			:)
				cmdtext=(${cmdtext%%[[:space:]]*} ${cmdtext#?[[:space:]]})

				printf '\e7\e[%dH\e[K\e8' $LINES
				tui::redraw

				case $cmdtext[1] {
					!) ${(z)cmdtext[2]// % #/ ${(qq)playing} } ;;

					j)
						file::is_playing &&
							file::play $playing $cmdtext[2]
					;;

					*)
						tui::cmdline 'No such command'
						return
					;;
				}
			;;
		}

		printf '\e[K\e[?25l\e8'
	} else {
		printf '%s\e8' $1
		{ sleep 5; printf '\e7\e[%dH\e[K\e8' $LINES; } &
	}
}

tui::key() {
	if [[ $1 == $'\e' ]] {
		read -rsk2
		1+=$REPLY
	}

	case $1 {
		# Up
		$'\e[A')
			(( y == 1 )) && return

			(( --y ))
			tui::redraw
		;;

		# Down
		$'\e[B')
			(( y == $#list )) && return

			(( ++y ))
			tui::redraw
		;;

		$'\e['[DC]|[ps])
			file::is_playing || return 1
		;|

		# Left
		$'\e[D')
			file::play $playing -5
		;;

		# Right
		$'\e[C')
			file::play $playing +5
		;;

		# p
		p)
			local sig; (( paused )) && sig=CONT || sig=STOP
			paused=$(( paused ? 0 : 1 ))

			kill -$sig $pid[aplay]
		;;

		# s
		s)
			unset playing
			(( stopped )) && tui::key p

			kill $pid[aplay]
		;;

		# Enter
		$'\n')
			playing=$list[$y]
			paused=0

			tui::cmdline "Selected ${playing##*/}"
			file::play $playing
		;;

		# q | Ctrl-D
		q|$'\004')
			exit
		;;

		[/:])
			tui::cmdline $1
		;;
	}
}

file::check() {
	local msg

	[[ -s $1 ]] ||
		msg='empty file'
	[[ -r $1 ]] ||
		msg='permission denied'
	[[ -f $1 || -d $1 ]] ||
		msg='no such file or directory'

	if [[ $msg ]] {
		warn $0 $1 $msg
		return 1
	}
}

file::is_playing() {
	if (( ! $+playing )) {
		tui::cmdline 'Not currently playing'
		return 1
	}
}

file::read_entries() {
	local -i i
	local output=("${(f)$(ffprobe -v error \
		-of default=nw=1 -show_streams $playing)}")

	for (( i = 1; i <= $#output; i++ ))
		entry[${output[$i]%%=*}]=${output[$i]#*=}
	printf -v 'entry[duration]' '%.0f' $entry[duration]
}

file::play() {
	# https://ffmpeg.org/ffmpeg-utils.html#Examples-1
	[[ $2 == [+-]([0-9]|[0-9](#c2):[0-9](#c2)(:[0-9](#c2))#)##(.[0-9]##|[mu]s)# ]] &&
		if [[ $2 == [+-]* ]] {
			local -i durationp
			local operation=${2[1]}
			read -r durationp < $progdir/duration
			durationp=$((
				entry[duration] - (entry[duration] - durationp)
			))

			2=$(( durationp $operation 5 ))
			2=$(( $2 < 0 ? 0 : $2 ))
			2=$(( $2 > entry[duration] ? entry[duration] : $2 ))
			(( durationr $operation= 5 ))
		} else {
			tui::cmdline 'Wrong time duration'
			return 2
		}

	file::read_entries
	[[ -f $progdir/progress ]] || :> $progdir/progress

	(( pid[aplay] )) && kill $pid[aplay]
	ffmpeg -nostdin -v warning \
		-progress $progdir/progress \
		${=2:+-ss $durationr} -i $1 -f wav -acodec pcm_s16le - \
	2>>$progdir/ffmpeg.log |
		aplay -q -c 2 -t raw -r $entry[sample_rate] -f s16_le - \
	2>>$progdir/aplay.log &
	assign_pid aplay

	(( pid[tail] )) && return
	coproc tail -f $progdir/progress 2>/dev/null
	assign_pid tail
	while read -p; do case $REPLY in out_time_ms=?*)
		# Says ms, but is actually us
		# real or fake
		printf '%d' $(( ${REPLY##*=} / 1000000 )) \
			> $progdir/duration
		tui::statusbar ${playing##*/} \
			$(( ${REPLY##*=} / 1000000 ))/$entry[duration]
	esac; done &
	assign_pid loop
}

assign_pid() {
	local -i current=$!
	pid[$1]=$current
}

warn() {
	printf '%s:%d: %s%s\n' $1 ${(%):-%i} ${3:+$3: } $2 >&2
}

usage() {
	<<-EOF >&2
	Usage: ${ZSH_ARGZERO##*/} [-$progopts] [files|dir]

	-d Report cursor position and key presses
	EOF
	exit 2
}

main() {
	typeset -gi maxl=$(( LINES - 3 )) y=1
	typeset -gA opts pid entry
	local -i OPTIND
	local opt OPTARG arg f
	local progopts=d
	progdir=${TMPDIR:=/tmp}/${ZSH_ARGZERO##*/}
	setopt extendedglob nullglob

	while getopts $progopts opt; do case $opt in
		[h?]) usage ;;
		*) opts[$opt]=${OPTARG:-1} ;;
	esac; done; shift $(( OPTIND - 1 ))

	for f (aplay ff{mpeg,probe})
		if (( ! $+commands[$f] )) {
			warn $0 'command not found' $f
			exit 1
		}
	[[ -d $progdir ]] || mkdir -p $progdir
	[[ $1 ]] || usage

	for arg {
		if [[ -d $arg ]] {
			file::check $1 || continue

			for f ($arg/**/*.(#i)(aac|aiff#|[af]lac|ape|m4[abr]|mpc|og[agmvx]|opus|tta|wa#v)(.))
				list+=($f)
		} elif [[ -f $arg ]] {
			list+=($arg)
		}
	}
	if (( ! $#list )) {
		warn $0 'no files' $1
		exit 1
	}

	# Disable input printing
	stty -echo
	# CSI ? 1049[hl]: Use (alternative|normal) screen buffer
	# CSI ? 7 l     : No auto-wrap mode
	# CSI ? 25 l    : Hide cursor
	# CSI Ps ; Ps r : Set scrolling region (top;bottom)
	printf '\e[?1049h\e[?7l\e[?25l\e[;%dr' $max
	# CSI 22 ; 2 t  : Save window title on stack
	# OSC 2 ; Pt ST : Change window title to Pt
	printf '\e[22;2t\e]2;%s\a' ${ZSH_ARGZERO##*/}
	# CSI 23 ; 2 t  : Restore window title from stack
	trap 'printf "\e[?1049l\e[?7h\e[?25h\e[;r\e[23;2t"; (( $#pid )) && kill $pid' \
		INT EXIT
	trap tui::redraw WINCH
	tui::redraw
	tui::statusbar

	for (( ;; )) {
		read -srk1 && {
			tui::key $REPLY

			(( opts[d] )) && tui::statusbar \
				"cursor: $y" "key: ${${(qqqq)REPLY}#$}"
		}

		[[ -t 1 ]] || exit 1
	}
}

main $@
